export default t=>{class e extends HTMLElement{connectedCallback(){Object.assign(this,t),this.DOM=this.shadow?this.attachShadow({mode:"open"}):this,this.props&&Object.keys(this.props()).forEach((t=>{const e=this.props()[t];if("function"==typeof e)this[t]=e(this.getAttribute(t));else{const e=`Handler for prop ${t} in component ${this.component} is not a function.`;console.warn(e)}})),this.render=()=>{const t=this.styles?`<style>${this.styles()}</style>`:"",e=this.template?this.template():"";this.DOM.innerHTML=t+e,e.match(/@[a-z]+/gi)?.forEach((t=>{const e=t.replace("@","");this.DOM.querySelectorAll(`[\\${t}]`).forEach((s=>{let i=this[s.getAttribute(t)];"function"==typeof this[s.getAttribute(t)]&&(s.removeAttribute(t),s.addEventListener(e,(t=>{i.apply(this,[t])})))}))})),this.parts={},this.DOM.querySelectorAll("[part]").forEach((t=>{t.on=(e,s=s)=>{t.addEventListener(e,(t=>{s.apply(this,[t])}))},this.parts[t.getAttribute("part")]=t})),this.ready&&this.ready()},this.render()}}!customElements.get(t.component)&&customElements.define(t.component,e)};